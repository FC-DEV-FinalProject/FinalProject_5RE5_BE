name: CD

# 1. 이벤트 설정
on:
  # PR 요청이 들어올 때 빌드와 테스트 실행
  push:
    branches:
      - main
jobs:
  CI:
    runs-on: ubuntu-latest
    env:
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      EMAIL_TITLE: ${{ secrets.EMAIL_TITLE }}
      EMAIL_CONTENT_TEMPLATE: ${{ secrets.EMAIL_CONTENT_TEMPLATE }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      AWS_S3_ACCESSKEY: ${{ secrets.AWS_S3_ACCESSKEY }}
      AWS_S3_SECRETKEY: ${{ secrets.AWS_S3_SECRETKEY }}
      AWS_S3_BUKET_NAME: ${{ secrets.AWS_S3_BUKET_NAME }}
      AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
      VC_URL: ${{ secrets.VC_URL }}
      VC_APIKEY: ${{ secrets.VC_APIKEY }}
      AWS_SQS_ACCESS_KEY_ID: ${{ secrets.AWS_SQS_ACCESS_KEY_ID }}
      AWS_SQS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SQS_SECRET_ACCESS_KEY }}
      AWS_SQS_QUEUE_URL: ${{ secrets.AWS_SQS_QUEUE_URL }}
      AWS_SQS_VIRTUAL_QUEUE_NAME: ${{ secrets.AWS_SQS_VIRTUAL_QUEUE_NAME }}

    steps: # 1. 코드 체크아웃
    - name: Check out code
      uses: actions/checkout@v4

    # 2. JDK 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    # 3-1. 소나큐브 패키지 캐싱 설정
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    # 3-2. Gradle 의존성 캐시 설정
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 4. Gradle Wrapper 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

      # 5. JSON Config 파일 생성
    - name: Create JSON Config File
      env:
        TTS_JSON_CONTENT: ${{ secrets.TTS_JSON_CONTENT }}
      run: |
        echo "${TTS_JSON_CONTENT}" > src/main/resources/tts.json

      # 6. 빌드 및 테스트 실행
    - name: Build and Test and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: ./gradlew build sonar --info

    # 7. 도커 로그인
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 8. 도커 이미지 생성 및 푸쉬
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_IMAGE }}:1.0 .
        docker push ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_IMAGE }}:1.0

# 서버 배포
  CD:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: EC2 ssh 접속
        uses: appleboy/ssh-action@master # ssh 접속 오픈소스
        with:
          host: ${{ secrets.REMOTE_IP }} # 인스턴스 IP
          username: ${{ secrets.REMOTE_USER }} # 우분투 아이디
          key: ${{ secrets.REMOTE_PRIVATE_KEY }} # ec2 instance pem key
          port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트
          debug: true # 디버그 모드 활성화
          script: |
            echo " - docker pull - "
            sudo docker pull ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_IMAGE }}:1.0
            
            # 스크립트 실행할 곳으로 이동
            cd ${{ secrets.SSH_PWD }}
            
            echo "docker_deploy.sh를 실행합니다."
            chmod +x ./docker_deploy.sh
            bash docker_deploy.sh > deploy.log 2>&1 &
            echo "새로운 docker_deploy.sh가 실행 중입니다."