#name: CD
#
## 1. 이벤트 설정
#on:
#  # PR 요청이 들어올 때 빌드와 테스트 실행
#  push:
#    branches:
#      - main
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    env:
#      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
#      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
#      EMAIL_TITLE: ${{ secrets.EMAIL_TITLE }}
#      EMAIL_CONTENT_TEMPLATE: ${{ secrets.EMAIL_CONTENT_TEMPLATE }}
#      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
#      AWS_S3_ACCESSKEY: ${{ secrets.AWS_S3_ACCESSKEY }}
#      AWS_S3_SECRETKEY: ${{ secrets.AWS_S3_SECRETKEY }}
#      AWS_S3_BUKET_NAME: ${{ secrets.AWS_S3_BUKET_NAME }}
#      AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
#      VC_URL: ${{ secrets.VC_URL }}
#      VC_APIKEY: ${{ secrets.VC_APIKEY }}
#
#
#
#    steps:      # 1. 코드 체크아웃
#      - name: Check out code
#        uses: actions/checkout@v4
#
#      # 2. JDK 17 설치
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # 3. Gradle 의존성 캐시 설정
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      # 4. Gradle Wrapper 권한 부여
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#
#      # 5. JSON Config 파일 생성
#      - name: Create JSON Config File
#        env:
#          TTS_JSON_CONTENT: ${{ secrets.TTS_JSON }}
#        run: |
#          echo "${TTS_JSON_CONTENT}" > src/main/resources/tts.json
#
#      # 6. 빌드 및 테스트 실행
#      - name: Build and Test
#        run: ./gradlew build
#
#      - name: Configure AWS credentials
#        uses: appleboy/ssh-action@master # ssh 접속 오픈소스
#        with:
#          host: ${{ secrets.REMOTE_IP }} # 인스턴스 IP
#          username: ${{ secrets.REMOTE_USER }} # 우분투 아이디
#          key: ${{ secrets.REMOTE_PRIVATE_KEY }} # ec2 instance pem key
#          port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트
#          timeout: 120s
#          debug: true # 디버그 모드 활성화
#          script: |
#            # 8080포트 사용중인 프로세스 확인
#            PID=$(lsof -t -i:8080)
#
#            # 포트가 사용 중인 경우 프로세스 종료
#            if [ -n "$PID" ]; then
#              echo "8080 포트를 사용중인 프로세스 (PID: $PID)를 종료합니다."
#            else
#              echo "8080 포트는 사용 중이지 않습니다."
#            fi
#
#            # 스크립트 실행할 곳으로 이동
#            cd /home/ubuntu/app
#
#            # 새로운 배포 스크립트 백그라운드 실행
#            echo "deploy.sh를 백그라운드에서 실행합니다."
#            nohup ./deploy.sh > deploy.log 2>&1 &
#            echo "새로운 deploy.sh가 실행 중입니다."