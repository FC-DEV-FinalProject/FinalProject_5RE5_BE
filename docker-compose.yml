services:
  nginx:
    container_name: nginx
    image: nginx:latest
    platform: linux/amd64
    restart: always
    ports:
      - "80:80"
    networks:
      - spring_network

  green:
    container_name: green
    image: alswooy/5re5park_image:1.0
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_TITLE: ${EMAIL_TITLE}
      SERVICE_NAME: ${SERVICE_NAME}
      EMAIL_CONTENT_TEMPLATE: ${EMAIL_CONTENT_TEMPLATE}
      AWS_S3_ACCESSKEY: ${AWS_S3_ACCESSKEY}
      AWS_S3_SECRETKEY: ${AWS_S3_SECRETKEY}
      AWS_S3_BUKET_NAME: ${AWS_S3_BUKET_NAME}
      AWS_S3_REGION: ${AWS_S3_REGION}
      VC_URL: ${VC_URL}
      VC_APIKEY: ${VC_APIKEY}
    ports:
      - "8080:8080"
    networks:
      - spring_network


  blue:
    container_name: blue
    image: alswooy/5re5park_image:1.0
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_TITLE: ${EMAIL_TITLE}
      SERVICE_NAME: ${SERVICE_NAME}
      EMAIL_CONTENT_TEMPLATE: ${EMAIL_CONTENT_TEMPLATE}
      AWS_S3_ACCESSKEY: ${AWS_S3_ACCESSKEY}
      AWS_S3_SECRETKEY: ${AWS_S3_SECRETKEY}
      AWS_S3_BUKET_NAME: ${AWS_S3_BUKET_NAME}
      AWS_S3_REGION: ${AWS_S3_REGION}
      VC_URL: ${VC_URL}
      VC_APIKEY: ${VC_APIKEY}
    ports:
      - "8081:8080"
    networks:
      - spring_network

networks:
  spring_network:
    driver: bridge
# î‚° docker network create spring_network